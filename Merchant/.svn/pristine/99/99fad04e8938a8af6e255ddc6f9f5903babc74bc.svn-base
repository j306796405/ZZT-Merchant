/**!
 * delivery.edit.controller.js
 * @author jianglj
 * @create 2016-04-27 13:48
 */
(function () {
    'use strict';

    angular
        .module('xcore.biz.product')
        .controller('product.publish.DeliveryEditController', DeliveryEditController)

    DeliveryEditController.$inject = [
        '$scope',
        '$rootScope',
        '$stateParams',
        'product.publish.publishService',
        'settings',
        'delivery.urls',
        'comp.notification.notificationService',
        'ngDialog'
    ];

    function DeliveryEditController($scope, $rootScope, $stateParams, publishService, settings, deliveryUrls, notificationService, ngDialog) {

        var vm = this,
            createUrls = deliveryUrls.create,
            detailUrls = deliveryUrls.detail,
            updateUrls = deliveryUrls.update,
        //采购商品详情查询
            GET_PRODUCT = createUrls.product,
        // 更新详情
            UPDATE_DETAIL = updateUrls.update,
        //验证规格组
            VALIDATE_PRODUCT = detailUrls.validateProduct,
        //采购商品列表查询
            PURCHASE_PRODUCT = createUrls.purchaseProducts;

        vm.MERCHANT = settings.backend.merchant,
            vm.PICS = settings.backend.pics;

        _init();
        
        function _init(){
            var isCreate = 2,
                isDelivery = true,
                isSave = true;
            $scope.product.status._changeProductStatus(isCreate, isDelivery, isSave);
            $scope.urls._changeUrlsByDelivery(isDelivery);
            $scope.product._setPsCode($stateParams.data.info.psCode);
            _.extend($scope.product.delivery, $stateParams.data);
            $scope.product.delivery.whCode = $stateParams.data.purchaseProducts[0].batchProducts[0].whCode;
            $scope.grpProducts = $scope.product.delivery.grpProducts;
            //优化单选的模型操作
            _.each($scope.product.delivery.attributes, function(o, i){
                if(o.multiSelect == 0){
                    o.valuesTemp = angular.copy(o.values);
                    o.values = [];
                }
            })
            
            //已经关联的产品不能取消关联
            _.each($scope.product.delivery.purchaseProducts, function(o, i){
                _.each(o.batchProducts, function(product, j){
                    if(j === 0){
                        o.sku = product.outSku;
                    }
                    product.isDisabled = true;
                })
            })

            //关联产品
            vm._selectProduct = _selectProduct;
            //产品取消关联
            vm._unlinkProduct = _unlinkProduct;
            //根据SKU搜索
            vm._purchaseProductSearchBySKU = _purchaseProductSearchBySKU;
            //根据产品名搜索
            vm._purchaseProductSearchByName = _purchaseProductSearchByName;
            //选择autocomplete的下拉框中的一项
            vm._selectAutoComplete = _selectAutoComplete;
            //新增空的商品参数
            vm._addEmptyParameters = _addEmptyParameters;
            //移除新增的商品参数
            vm._removeParameters = _removeParameters;
            //更新规格组编码
            vm._validateCode = _validateCode;
            //保存表单
            vm._saveDelivery = _saveDelivery;

            vm.filterBy = [];
            vm.filterBySelect = [
                {name: '按商品名称查询', id: 'name'},
                {name: '按采购SKU号查询', id: 'SKU'}
            ];
        }

        function _selectAutoComplete(selected) {
            var index = this.id,
                item = $scope.product.delivery.purchaseProducts[index];
            publishService._selectAutoComplete(selected, item);
        }

        function _selectProduct($event, item, purchaseProducts, index) {
            publishService.addProduct($event, item, $scope.product.delivery, purchaseProducts, index, GET_PRODUCT);
        }

        function _unlinkProduct($event, index, item) {
            publishService._unlinkProduct($event, index, item, vm);
        }

        function _purchaseProductSearchByName(str) {
            var baCode = '00000001C',
                index = this.id,
                item = $scope.product.delivery.purchaseProducts[index]
            var request = publishService._remoteUrlRequestMake({name: str}, baCode, item, $scope.product.delivery);
            return publishService._purchaseProductSearch(PURCHASE_PRODUCT, null, request);
        }

        function _purchaseProductSearchBySKU(str) {
            var baCode = '00000001C',
                index = this.id,
                item = $scope.product.delivery.purchaseProducts[index]
            var request = publishService._remoteUrlRequestMake({sku: str}, baCode, item, $scope.product.delivery);
            return publishService._purchaseProductSearch(PURCHASE_PRODUCT, null, request);
        }

        function _addEmptyParameters(parameters){
            parameters.push({
                name: '',
                values: [
                    {
                        name: ''
                    }
                ],
                isGlobal: 0
            })
        }
        
        function _removeParameters(parameters, index){
            parameters.splice(index,1);
        }

        function _validateCode(psCode, pgCode){
            publishService.validateCode(VALIDATE_PRODUCT, null, {psCode: psCode, pgCode: pgCode})
                .then(function(){
                    vm.validateBool = true;
                    $scope.isEditCode = !$scope.isEditCode;
                }, function(errMsg){
                    vm.validateBool = false;
                    notificationService.notify('异常', errMsg);
                })
        }

        //表单保存
        function _saveDelivery(){
            var submitData = angular.copy($scope.product.delivery),
                isValid = true,
                tasks = [filterInfo, filterPics, filterAttributes, filterParameters, submit];

            _.each(tasks, function(ruleFunc, i){
                if(isValid){
                    ruleFunc();
                }
            })

            function filterInfo(){
                if(!submitData.info.name){
                    notificationService.notify('异常', '请填写商品名称');
                    return isValid = false;
                }
            }

            function filterPics(){
                if(submitData.pics.length === 0){
                    notificationService.notify('异常', '请上传至少一张商品图片');
                    return isValid = false;
                }
            }

            function filterAttributes(){
                var attributesTemp = [];
                _.each(submitData.attributes, function(o, i){
                    //如果是非必填                    
                    if(!+o.required){
                        if(+o.isCheckbox){
                            //过滤没有选中的checkbox
                            var filterSelectedCheckboxs = publishService.filterSelectedCheckboxs(o.values);
                            o.values = filterSelectedCheckboxs;
                            if(filterSelectedCheckboxs.length){
                                attributesTemp.push(o);
                            }
                        }else{
                            //name是否有值 如果没有则移除
                            if(o.multiSelect == 1){
                                if(!!(o.values[0].name)){
                                    attributesTemp.push(o);
                                }
                            }else if(o.multiSelect == 0){
                                if(!!o.values[0]){
                                    attributesTemp.push(o);
                                }
                            }
                        }
                    }else{
                        if(+o.isCheckbox){
                            var filterSelectedCheckboxs = publishService.filterSelectedCheckboxs(o.values);
                            o.values = filterSelectedCheckboxs;
                            if(o.values.length === 0){
                                notificationService.notify('异常', '请填写商品属性的必填项');
                                return isValid = false;
                            }
                            attributesTemp.push(o);
                        }else{
                            //name是否有值 如果没有则移除
                            if(o.multiSelect == 1){
                                if(!(o.values[0].name)){
                                    notificationService.notify('异常', '请填写商品属性的必填项');
                                    return isValid = false;
                                }
                                attributesTemp.push(o);
                            }else if(o.multiSelect == 0){
                                if(!o.values[0]){
                                    notificationService.notify('异常', '请填写商品属性的必填项');
                                    return isValid = false;
                                }
                                attributesTemp.push(o);
                            }
                        }
                    }
                })
                submitData.attributes = attributesTemp;
            }

            //商品参数
            function filterParameters(){
                var parametersTemp = [];
                _.each(submitData.parameters, function(o, i){
                    //如果是非必填字段 仅记录有值得字段
                    if(!+o.required){
                        (!!o.ppName && !!o.pvName) ? parametersTemp.push(o) : '';
                    }else{
                        if(!o.pvName){
                            notificationService.notify('异常', '请填写商品参数的必填项');
                            return isValid = false;
                        }
                        parametersTemp.push(o);
                    }
                })
                submitData.parameters = parametersTemp;
            }

            function submit(){
                delete submitData.grpProducts;
                delete submitData.classSpecifications;
                publishService.updateDeliveryDetail(UPDATE_DETAIL, null, submitData)
                    .then(function(data){
                        notificationService.success('成功', '保存成功')
                    }, function(errMsg){
                        notificationService.notify('异常', errMsg);
                    })
            }
        }
    }

})();
