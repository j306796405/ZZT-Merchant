/**!
 * detail.notDelivery.info.controller
 * @author jianglj
 * @create 2016-05-20 16:03
 */
(function () {
  'use strict';
  angular
    .module('xcore.biz.product')
    .controller('product.publish.detail.notDelivery.info', InfoController);
  InfoController.$inject = [
    '$scope',
    '$state',
    '$filter',
    'product.publish.publishService',
    'product.publish.publishNoDeliveryService',
    'settings',
    'notDelivery.urls',
    'comp.notification.notificationService',
    'comp.session.sessionService',
    'xcore.public.setting',
    '$timeout'
  ];
  function InfoController($scope, $state, $filter, publishService, publishNoDeliveryService, settings, notDeliveryUrls, notificationService, sessionService, publicSetting, $timeout) {
    var vm = this,
      createUrls = notDeliveryUrls.create,
      updateUrls = notDeliveryUrls.update,
    // 更新详情
      UPDATE_DETAIL = updateUrls.update,
    //保税区
      BONEDAREA = createUrls.bonedArea,
    //简写
      $delivery = $scope.product.delivery;
    //当前isCurrent = 1的pvNames
    vm.currentPvNames = '';
    //下拉 保税区
    vm.select = {};
    //图片展示终端IP
    vm.PICS = settings.backend.pics;
    //绘制规格矩阵
    vm._renderMatrix = _renderMatrix;
    //恢复缓存数据
    vm._fillProductSpecificationsCached = _fillProductSpecificationsCached;
    //删除规格
    vm._removeSpecifications = _removeSpecifications;
    //修改其他规格
    vm._modifySpecifications = _modifySpecifications;
    //新增空的商品参数
    vm._addEmptyParameters = _addEmptyParameters;
    //移除新增的商品参数
    vm._removeParameters = _removeParameters;
    //保存表单
    vm._saveForm = _saveForm;
    //初始化
    vm._init = _init;
    vm.filterBy = [];
    vm.filterBySelect = [
      {name: '按商品名称查询', id: 'name'},
      {name: '按采购SKU号查询', id: 'SKU'}
    ];
    vm._init();
    $scope.$on('getInfoData', function (e, info) {
      _.extend($delivery, info, {
        specificationsObjects: [],
        productSpecificationsCached: {}
      });

      //优化单选的模型操作
      _.each($delivery.attributes, function (o, i) {
        if (o.multiSelect == 0) {
          o.valuesTemp = angular.copy(o.values);
          o.values = [];
        }
      })

      //分转元
      _.each($delivery.productSpecifications, function (o, i) {
        o.settleAmount = $filter('f_money')(o.settleAmount);
      })

      var selectedSpecifications = {},
        specificationsObjects = $delivery.specificationsObjects,
      //复制一份拷贝保证重新绘制矩阵后数据还存在
        productSpecificationsCached = $delivery.productSpecificationsCached = angular.copy($delivery.productSpecifications);
      //过滤出已选中productSpecifications
      _.each($delivery.productSpecifications, function (productSpecifications, i) {
        if (productSpecifications.isCurrent != 1) {
          //0 不可修改 1 isCurrent=1修改 2新增
          productSpecifications.status = 0;
        } else {
          productSpecifications.status = 1;
        }
        _.each(productSpecifications.specifications, function (specifications, j) {
          if (!selectedSpecifications[specifications.ppId]) {
            selectedSpecifications[specifications.ppId] = {};
          }
          selectedSpecifications[specifications.ppId][specifications.pvId] = true;
        })
      })

      //设置pvNames作为判断缓存的判断依据的key
      _.each(productSpecificationsCached, function (o, i) {
        var pvNames = '';
        _.each(o.specifications, function (specification, j) {
          pvNames += '_' + specification.pvName;
        })
        //设置isCurrent为1时候的标识
        if (o.isCurrent == 1) {
          vm.currentPvNames = pvNames;
        }
        o.pvNames = pvNames;
      })

      //规格checkbox初始化还原
      _.each($delivery.classSpecifications, function (classSpecifications, i) {
        var ppId = classSpecifications.ppId;
        specificationsObjects[i] = [];
        if (selectedSpecifications[ppId]) {
          classSpecifications.isChecked = true;
          classSpecifications.isSelected = true;
          _.each(classSpecifications.values, function (specification, j) {
            var pvId = specification.pvId;
            if (selectedSpecifications[ppId][pvId]) {
              specification.isChecked = true;
              specificationsObjects[i][j] = specification;
            }
          })
        }
      })
    })

    function _renderMatrix(specifications, specificationsObjects, outerIndex, innerIndex, item) {
      var specificationsObjectsCompacted = [],
        index = 0,
        productSpecifications = $delivery.productSpecifications,
        productSpecificationsCached = $delivery.productSpecificationsCached;
      if (item.isChecked) {
        specificationsObjects[outerIndex][innerIndex] = item;
      } else {
        specificationsObjects[outerIndex][innerIndex] = false;
      }
      //过滤包含undefined, false, null数组
      _.each(specificationsObjects, function (o, i) {
        var arr = _.compact(o);
        if (arr.length) {
          specificationsObjectsCompacted[index] = arr;
          specifications[i].isSelected = true;
          index++;
        } else {
          specifications[i].isSelected = false;
        }
      })
      //绘制矩阵
      specificationsObjectsCompacted = publishNoDeliveryService._combine(specificationsObjectsCompacted);
      //绘制数据模型
      productSpecifications.splice(0, productSpecifications.length);
      _.each(specificationsObjectsCompacted, function (o, i) {
        var pvNames = '';
        _.each(o, function (item, j) {
          pvNames += '_' + item.pvName;
        })
        productSpecifications[i] = {
          specifications: o,
          isCurrent: 0,
          pvNames: pvNames,
          status: 2
        }
      })
      vm._fillProductSpecificationsCached(productSpecifications, productSpecificationsCached);
    }

    //重新绘制矩阵后 还原缓存值
    function _fillProductSpecificationsCached(productSpecifications, productSpecificationsCached) {
      _.each(productSpecifications, function (specification, i) {
        _.each(productSpecificationsCached, function (specificationsCached, j) {
          if (specification.pvNames === specificationsCached.pvNames) {
            if (specification.pvNames !== vm.currentPvNames) {
              //0 不可修改 1 isCurrent=1修改 2新增
              specification.status = 0;
            } else {
              specification.isCurrent = 1;
              specification.status = 1;
            }
            specification.settleAmount = specificationsCached.settleAmount;
            specification.hsCode = specificationsCached.hsCode;
            specification.netWeight = specificationsCached.netWeight;
            specification.grossWeight = specificationsCached.grossWeight;
            specification.prNo = specificationsCached.prNo;
            specification.barcode = specificationsCached.barcode;
            specification.psCode = specificationsCached.psCode;
            specification.pprId = specificationsCached.pprId;
          }
        })
      })
    }

    function _removeSpecifications(specifications, index) {
      specifications.splice(index, 1);
    }

    function _modifySpecifications(psCode) {
      $state.go('xcore._blank', {location: false}).then(function () {
        $state.go('xcore.product_detail', {
          location: true,
          psCode: psCode,
          tabIndex: 0,
          isDelivery: false
        });
      });
    }

    function _init() {
      publishNoDeliveryService
        ._commonGet(BONEDAREA, null, null)
        .then(function (bonedAreaSelect) {
          vm.select.bonedArea = bonedAreaSelect;
        }, function () {
          notificationService.notify('异常', '一级采购分类查询出错');
        })

    }

    function _addEmptyParameters(parameters) {
      if (parameters.length >= 20) {
        notificationService.notify('异常', '自定义参数已达上限');
        return;
      }
      parameters.push({
        name: '',
        values: [
          {
            name: ''
          }
        ],
        isGlobal: 0
      })
    }

    function _removeParameters(parameters, index) {
      parameters.splice(index, 1);
    }

    //表单保存
    function _saveForm(form) {
      if (form.$invalid) {
        notificationService.success('异常', '规格验证出错');
        return;
      }
      var submitData = angular.copy($scope.product.delivery),
        isValid = true,
        tasks = [filterInfo, filterSpecifications, filterPics, filterAttributes, filterParameters, submit];
      _.each(tasks, function (ruleFunc, i) {
        if (isValid) {
          ruleFunc();
        }
      })
      //商品信息
      function filterInfo() {
        if (!submitData.info.name) {
          notificationService.notify('异常', '请填写商品名称');
          return isValid = false;
        }
      }

      //商品规格
      function filterSpecifications() {
      }

      //商品图片
      function filterPics() {
        if (submitData.pics.length === 0) {
          notificationService.notify('异常', '请上传至少一张商品图片');
          return isValid = false;
        }
      }

      //商品属性
      function filterAttributes() {
        var attributesTemp = [];
        _.each(submitData.attributes, function (o, i) {
          //如果是非必填
          if (!+o.required) {
            if (+o.isCheckbox) {
              //过滤没有选中的checkbox
              var filterSelectedCheckboxs = publishService.filterSelectedCheckboxs(o.values);
              o.values = filterSelectedCheckboxs;
              if (filterSelectedCheckboxs.length) {
                attributesTemp.push(o);
              }
            } else {
              //name是否有值 如果没有则移除
              if (o.multiSelect == 1) {
                if (!!(o.values[0].name)) {
                  attributesTemp.push(o);
                }
              } else if (o.multiSelect == 0) {
                if (!!o.values[0]) {
                  attributesTemp.push(o);
                }
              }
            }
          } else {
            if (+o.isCheckbox) {
              var filterSelectedCheckboxs = publishService.filterSelectedCheckboxs(o.values);
              o.values = filterSelectedCheckboxs;
              if (o.values.length === 0) {
                notificationService.notify('异常', '请填写商品属性的必填项');
                return isValid = false;
              }
              attributesTemp.push(o);
            } else {
              //name是否有值 如果没有则移除
              if (o.multiSelect == 1) {
                if (!(o.values[0].name)) {
                  notificationService.notify('异常', '请填写商品属性的必填项');
                  return isValid = false;
                }
                attributesTemp.push(o);
              } else if (o.multiSelect == 0) {
                if (!o.values[0]) {
                  notificationService.notify('异常', '请填写商品属性的必填项');
                  return isValid = false;
                }
                attributesTemp.push(o);
              }
            }
          }
        })
        submitData.attributes = attributesTemp;
      }

      //商品参数
      function filterParameters() {
        var parametersTemp = [];
        _.each(submitData.parameters, function (o, i) {
          //如果是非必填字段 仅记录有值得字段
          if (!+o.required) {
            (!!o.ppName && !!o.pvName) ? parametersTemp.push(o) : '';
          } else {
            if (!o.pvName) {
              notificationService.notify('异常', '请填写商品参数的必填项');
              return isValid = false;
            }
            parametersTemp.push(o);
          }
        })
        submitData.parameters = parametersTemp;
      }

      function submit() {
        delete submitData.grpProducts;
        delete submitData.classSpecifications;

        console.log(submitData.detailDesc);
        publishNoDeliveryService._commonPatch(UPDATE_DETAIL, null, submitData)
          .then(function (data) {
            notificationService.success('成功', '保存成功');
          }, function (errMsg) {
            notificationService.notify('异常', errMsg);
          })
      }
    }
  }
})();
