/**!
 * delivery.controller
 * @author jianglj
 * @create 2016-04-18 10:58
 */
(function () {
    'use strict';

    angular
        .module('xcore.biz.product')
        .controller('product.publish.DeliveryController', DeliveryController)

    DeliveryController.$inject = [
        '$timeout',
        '$state',
        '$scope',
        '$rootScope',
        'product.publish.publishService',
        'comp.util.arrayUtil',
        'settings',
        'FileUploader',
        'comp.notification.notificationService'
    ];
    
    function DeliveryController($timeout, $state, $scope, $rootScope, publishService, arrayUtil, settings, FileUploader, notificationService) {

        var vm = this,
            //采购商品详情查询
            PRODUCT_DETAIL = '/merchant/purchase-products/detail/:pprId',
            //采购商品分类/属性/规格/参数/品牌查询
            PRODUCT_INFO = '/merchant/purchase-products/class',
            //创建入仓商品请求参数
            CREATE_PRODUCT = '/product/inwarehousing/create',
            //查询入库商品详情
            PRODUCT_EDIT = '/product/edit/in-warehouse/get/:psCode';

            publishService
                .getDeliveryDetail(PRODUCT_EDIT, {psCode: 201604280000049}, null)
                .then(function(data){
                    $state.go('xcore.product_publish.delivery_edit', {
                        data: data
                    });
                }, function(){

                });

        vm.MERCHANT = settings.backend.merchant;
        vm.rest = {};
        vm.filterList = [];
        vm.filterBy = [];
        vm.product = $scope.form.product = {
            purchaseProducts: [],
            info: {},
            specifications: [],
            properties: [],
            parameters: [],
            pics: [],
            detailDesc: ''
        };

        _init();

        function _init() {
            vm.relate_num_select = [
                {name: '1', id: '1'},
                {name: '2', id: '2'},
                {name: '3', id: '3'},
                {name: '4', id: '4'},
                {name: '5', id: '5'},
                {name: '6', id: '6'},
                {name: '7', id: '7'},
                {name: '8', id: '8'},
                {name: '9', id: '9'},
                {name: '10', id: '10'}
            ];
            vm.relate_num = vm.relate_num_select[0].id;
            vm.filterBySelect = [
                {name: '按商品名称查询', id: 'name'},
                {name: '按采购SKU号查询', id: 'SKU'}
            ];
            vm.filterBy[0] = vm.filterBySelect[0].id;
            vm._relateProduct = _relateProduct;
            vm._loadProductInfo = _loadProductInfo;
            vm._selectProduct = _selectProduct;
            vm._unlinkProduct = _unlinkProduct;
            vm._addEmptySpecification = _addEmptySpecification;
            vm._removeSpecification = _removeSpecification;
            vm._addEmptyParameters = _addEmptyParameters;
            vm._removeParameters = _removeParameters;
            vm._remoteUrlRequestBySKU = _remoteUrlRequestBySKU;
            vm._remoteUrlRequestByName = _remoteUrlRequestByName;
            vm._selectAutoComplete = _selectAutoComplete;
            vm._selectSpecification = _selectSpecification;
            vm._ifSetRequired = _ifSetRequired;
            vm._focusIn = _focusIn;
            vm.moveLeft = moveLeft;

            vm.moveRight = moveRight;
            vm.isLoadInfo = false;

            _relateProduct(1);

            function _relateProduct(repeat) {
                $scope.form.product.purchaseProducts = [];
                for (var i = 0; i < repeat; i++) {
                    var products = $scope.form.product.purchaseProducts;
                    var relateProduct = new RelateProduct([], [], 0, 0, products.length);
                    products.push(relateProduct);
                    vm.filterList[i] = {
                        codes: [],
                        list: []
                    };
                    vm.filterBy[i] = vm.filterBySelect[0].id;
                }

                function RelateProduct(linkProducts, pprIds, nums, isMain, grpNo) {
                    this.linkProducts = linkProducts;
                    this.pprIds = pprIds;
                    this.nums = nums;
                    this.isMain = isMain;
                    this.grpNo = grpNo;
                }
            }

            function _selectProduct($event, item) {
                var $this = $($event.target),
                    pprId = item.pprId;
                if(!pprId){
                    notificationService.notify('异常', '无相关产品');
                    return;
                }
                publishService.getSingleProduct(PRODUCT_DETAIL, {pprId: pprId}, null)
                    .then(function (product) {
                        if ($.inArray(product.pprId, item.ppIds) < 0) {
                            item.linkProducts.push(product);
                            item.pprIds.push(product.pprId);
                        }else{
                            notificationService.notify('异常', '已经加过改产品');
                        }
                    }, function (errResponse) {
                        console.log(errResponse);
                    })
            }

            function _loadProductInfo($event, item) {
                if (!item.pprIds.length) {
                    notificationService.notify('异常', '请先关联数据');
                    item.isMain = 0;
                    return;
                }
                publishService.getProductInfo(PRODUCT_INFO, null, {code : item.pprIds[0]})
                    .then(function (product) {
                        vm.rest.productInfo = product;
                        vm.rest.productInfo.classes.attributes = arrayUtil.groupArray(vm.rest.productInfo.classes.attributes, 3);
                        $scope.form.product.info.purchaseClass = product.classes.pcCode;
                        $scope.form.product.info.brandCode = product.brand.brancCode;
                        vm.isLoadInfo = true;
                    }, function (errResponse) {
                        console.log(errResponse);
                    })
            }

            function _unlinkProduct($event, item, linkProduct) {
                item.ppIds = _.without(item.ppIds, linkProduct.pprId);
                item.linkProducts = _.without(item.linkProducts, linkProduct);
                if(!item.ppIds.length){
                    vm.isLoadInfo = false;
                    item.isMain = 0;
                }
            }

            function _addEmptySpecification(items) {
                if(!items.values){
                    items.values = [];
                }
                items.values.push({
                    pvid: 0,
                    name: ''
                })
            }

            function _selectSpecification(specifications, index){
                console.log(index);
            }

            function _removeSpecification(items, index) {
                items.splice(index, 1);
            }

            function _addEmptyParameters(items) {
                if(!items){
                    items = [];
                }
                items.push({
                    "ppid": 0,
                    "name": "",
                    "multiSelect": "1",
                    "showName": "测试测试",
                    "values": [
                        {
                            "pvid": 0,
                            "name": ""
                        }
                    ]
                })
            }

            function _removeParameters(items, index) {
                items.splice(index, 1);
            }

            function _remoteUrlRequestBySKU(str) {
                return {
                    sku: str,
                    baCode: 'A001'//$rootScope.session.saCode
                };
            }

            function _remoteUrlRequestByName(str) {
                return {
                    name: str,
                    baCode: 'A001'//$rootScope.session.saCode
                };
            }

            function _selectAutoComplete(selected) {
                var index = this.id;
                if (selected) {
                    $scope.form.product.purchaseProducts[index].pprId = selected.originalObject.pprId;
                } else {
                    $scope.form.product.purchaseProducts[index].pprId = null;
                }
            }

            function _focusIn() {

            }
            
            function _ifSetRequired(item, value, required){
                //如果required为true不作修改
                if(required == 1){
                    return;
                }
                //判断是否数组
                if(_.isArray(value)){
                    var bool = false;
                    _.each(value, function(i, v){
                        //有一个值不为空即require = 1;
                        if(v){
                            item.required = 1;
                            bool = true;
                            return false;
                        }
                    })
                    if(!bool){
                        item.required = 2;
                    }
                }else{
                    if(!value.length){
                        item.required = 2;
                    }else{
                        item.required = 1;
                    }
                }

            }

            $scope.$on('saveDelivery', function(event,data) {
                collectSpecifications();
                collectProperties();
                // collectParameters();
                collectPics();

                console.log($scope.form.product);

                publishService.createDelivery(CREATE_PRODUCT, null, $scope.form.product);

                function collectSpecifications(){
                    var specifications = $scope.form.product.specifications = [];
                    $('.J_productSpecificationItem:visible').each(function(index){
                        var $this = $(this),
                            ppId, pvId, isGlobal, isChecked,
                            isChecked = $this.find('input:checked').length;
                        if(isChecked){
                            isGlobal = $this.find('input:checked').data('isglobal');

                            ppId = $this.find('.format-title').data('ppid');
                            if(isGlobal){
                                pvId = $this.find('input:checked').val();
                            }else{
                                pvId = $this.find('.J_val').val();
                            }

                            specifications.push({
                                "ppId": ppId,
                                "pvId": pvId,
                                "isGlobal": isGlobal
                            })
                        }
                    })
                }

                function collectProperties(){

                }

                function collectParameters(){
                    var parameters = $scope.form.product.parameters = [];
                    $('.J_parameter-box .J_parameter-item').each(function(){
                        var $this = $(this),
                            ppId, pvId, isGlobal;

                        isGlobal = $(this).find('.J_val').data('isglobal');
                        if(isGlobal){
                            ppId = $this.find('.J_key').data('ppid');
                        }else{
                            ppId = $this.find('.J_key').val();
                        }
                        pvId = $this.find('.J_val').val();

                        parameters.push({
                            ppId: ppId,
                            pvId: pvId,
                            isGlobal: isGlobal
                        });
                    })
                }

                function collectPics(){
                    $scope.form.product.pics = [];
                    $.each(vm.uploader.queue, function(i, item){
                        $scope.form.product.pics.push(item.uri);
                    })

                }

            });
        }

        function moveLeft(pics, index){
            if(!index){
                return;
            }
            var targetIndex = index - 1,
                target = pics[targetIndex],
                source = pics[index];
            pics[targetIndex] = source;
            pics[index] = target;
        }

        function moveRight(pics, index){
            if(pics.length - 1 === index){
                return;
            }
            var targetIndex = index + 1,
                target = pics[targetIndex],
                source = pics[index];
            pics[targetIndex] = source;
            pics[index] = target;
        }

        vm.uploader = new FileUploader({
            url: 'http://10.2.9.36:8080/files/images'
        });

        // FILTERS
        vm.uploader.filters.push({
            name: 'imageFilter',
            fn: function(item /*{File|FileLikeObject}*/, options) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });
        vm.uploader.filters.push({
            name: 'sizeFilter',
            fn: function(item , options) {
                if(item.size / 1000 <= 500){
                    return true
                }else{
                    notificationService.notify('异常', '图片不能大于500k');
                }
            }
        });

        vm.uploader.onAfterAddingAll = function(addedFileItems) {
            vm.uploader.uploadAll();
        };

        vm.uploader.onSuccessItem = function(fileItem, response, status, headers) {
            var uri = response[0].uri;
            fileItem.uri = uri;
        };

        vm.controller = {
            isImage: function(item) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        };

    }

})();
