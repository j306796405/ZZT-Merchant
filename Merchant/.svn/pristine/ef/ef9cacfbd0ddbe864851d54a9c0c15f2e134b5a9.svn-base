/**!
 * not-delivery.controller
 * 创建非入仓商品控制器
 * @author xiaodong.liu
 * @create 2016-05-07 14:23
 */
(function () {
    'use strict';

    angular
        .module('xcore.biz.product')
        .controller('product.publish.NotDeliveryController', NotDeliveryController)

    NotDeliveryController.$inject = [
        '$timeout',
        '$state',
        '$scope',
        'product.publish.publishNoDeliveryService',
        'settings',
        'notDelivery.urls',
        'comp.notification.notificationService',
        '$q',
        '$http',
        'comp.util.arrayUtil',
        'comp.session.sessionService'
    ];

    function NotDeliveryController($timeout, $state, $scope, publishNoDeliveryService, settings, notDeliveryUrls, notificationService, $q, $http, arrayUtil, sessionService) {
        var vm = this,
            createUrls = notDeliveryUrls.create,
            detailUrls = notDeliveryUrls.detail,
        // 一级采购分类
            FIRST_CATEGORY = createUrls.firstCategory,
        //联动采购分类
            OTHER_CATEGORY = createUrls.otherCategory,
        //采购商品分类/属性/规格/参数/品牌查询
            PRODUCT_INFO = createUrls.detail,
        // 品牌
            BRANDS = createUrls.brands;
        vm.isLoadInfo = false;
        $scope.form = {};
        vm.product = $scope.form.product = {
            info: {},
            productSpecifications: [],
            properties: [],
            parameters: [],
            pics: [],
            detailDesc: ''
        }
        var info = {
            "areaType":'',
            "baCode":'',
            "purchaseClass":'',
            "brandCode":'',
            "name":'',
            "summary":''
        };
        vm.product.info = info;
        vm.src = {};
        vm.selected = {};
        vm.src={
            specifications: [],
            properties: [],
            parameters: []
        };
        vm.selected = {
            specifications:{ list:[],specIndexList:[],finalSpecMatrixList:[] },
            properties:[],
            parameters:[]
        }
        //一级采购分类查询
        vm._getFirstCategory = _getFirstCategory;
        //二级采购分类查询
        vm._getSecondCategory = _getSecondCategory;
        //三级采购分类查询
        vm._getThirdCategory = _getThirdCategory;
        /***
         * 根据分类加载商品配置内容（规格,属性,参数等)
         * @type {loadProductConfigureFunc}
         */
        vm._loadProductConfigure = _loadProductConfigure;
        /***
         * 选择规格
         * @type {selectSpecificationFunc}
         */
        vm._selectSpecification = _selectSpecification;
        vm._isSpecValueSelected = _isSpecValueSelected;
        vm._updateSpecMatrix = _updateSpecMatrix;
        vm._loadProductInfo = _loadProductInfo;

        (function init(){
            vm._loadProductConfigure();
        })();

        function _getFirstCategory(){
            return publishNoDeliveryService
                .commonGet(FIRST_CATEGORY, null, null)
                .then(function(data){
                    return data = arrayUtil.formatToMulitSelect(data);
                }, function(){
                    notificationService.notify('异常', '一级采购分类查询出错');
                })
        }
        
        function _getSecondCategory(selected){
            var pcCode = selected.firstCategory;
            return publishNoDeliveryService
                .commonGet(OTHER_CATEGORY, {pcCode: pcCode}, null)
                .then(function(data){
                    return data = arrayUtil.formatToMulitSelect(data);
                }, function(){
                    notificationService.notify('异常', '二级采购分类查询出错');
                })
        }
        
        function _getThirdCategory(selected){
            var pcCode = selected.secondCategory;
            return publishNoDeliveryService
                .commonGet(OTHER_CATEGORY, {pcCode: pcCode}, null)
                .then(function(data){
                    return data = arrayUtil.formatToMulitSelect(data);
                }, function(){
                    notificationService.notify('异常', '二级采购分类查询出错');
                })
        }

        function _loadProductConfigure() {
            publishNoDeliveryService._loadProductConfigure(vm);
        }

        function _selectSpecification() {
            publishNoDeliveryService._selectSpecification();
        }

        function _isSpecValueSelected(matrixIndex, pvId) {
            return publishNoDeliveryService._isSpecValueSelected(matrixIndex, pvId)
        }

        function _updateSpecMatrix($event, matrixIndex, pvId) {
            publishNoDeliveryService._updateSpecMatrix($event, matrixIndex, pvId);
        }

        function _loadProductInfo(purchaseClass){
            var productInfoParam = {pcCode: purchaseClass},
                brandsParam = {saCode: sessionService.getSessionFromCache().saCode};

            $q.all([
                    publishNoDeliveryService.commonGet(PRODUCT_INFO, null, productInfoParam),
                    publishNoDeliveryService.commonGet(BRANDS, brandsParam, null),
            ]).then(function(data){
                var product = data[0];
                vm.product.properties = product.attributes,
                vm.product.parameters = product.parameters,
                vm.product.info.brandsSelect = data[1];
                vm.isLoadInfo = true;
            }, function(errMsg){
                errMsg[0] ? notificationService.notify('异常', errMsg[0]) : '';
                errMsg[1] ? notificationService.notify('异常', errMsg[1]) : '';
            })

        }
    }

})();
